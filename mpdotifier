#! /usr/bin/env python3

import argparse
import sys
from time import sleep, strftime
from os import environ
from os.path import exists, join, split, splitext

from mpd import MPDClient

from gi import require_version
require_version('Notify', '0.7')
from gi.repository import Notify
from gi.repository.GdkPixbuf import Pixbuf

PROGRAM_NAME = "Mpdotifier"
MUSICPATH = join(environ['HOME'],"Music")
#MUSICPATH = os.environ["XDG_MUSIC_DIR"];
ALBUM_COVER_FILE_EXTENSIONS = (".png", ".jpg", ".jpeg", ".gif", ".svg")
# Time to wait in seconds between checking mpd status changes
POLLING_INTERVAL = 0.5
# Time to wait in seconds between checking for mpd existing
SLEEP_INTERVAL = 5

class NotificationWrapper:
    def __init__(self):
        Notify.init(PROGRAM_NAME)
        self.notification = Notify.Notification.new("Initializing {}..".format(PROGRAM_NAME))

    def notify(self, song):
        self.notification.clear_hints()
        # \uf025 - 
        # \uf43a - 
        caption = '\uf025 {}'.format(song["title"]).replace("&", "&amp;")
        body  = "\n<b>{}".format(song["album"]).replace("&", "&amp;")
        try:
            d = song["date"]
            body += "({})".format(d)
        except:
            pass
        body += "</b>\n\n<i>by: {}</i>\n\n".format(song["artist"]).replace("&", "&amp;")
        body += "\uf43a {}".format(song["duration"])
        if song["file_path"] == None:
            self.notification.update(caption,body,icon="music")
        else:
            self.notification.update(caption,body)
            self.notification.set_image_from_pixbuf(Pixbuf.new_from_file(song["file_path"]))
        self.notification.show()

    def notifyStatus(self, status):
        self.notification.clear_hints()
        if status == "pause":
            self.notification.update("MPD Paused",icon="music")
        elif status == "stop":
            self.notification.update("MPD Stopped",icon="music")
        self.notification.show()

class Mpdotifier (object):
    def __init__(self):

        self.nw = NotificationWrapper()
        self.client = MPDClient()
        # self.client.timeout = 1  # Why?
        # self.client.idletimeout = None

    def start(self):
        while True:
            try:
                self.client.connect(args.host, args.port)
                print("{0}: Connected to MPD".format(strftime("%a, %d %b %Y %H:%M:%S")))
                self.observe()
            except KeyboardInterrupt:
                print("{0}: Killed by way of keyboard...".format(strftime("%a, %d %b %Y %H:%M:%S")))
                nw.uninit()
                sys.exit()
            except ConnectionError:
                print("{}: Cannot connect to MPD (host: {} port: {})".format(strftime("%a, %d %b %Y %H:%M:%S"),
                                                                             args.host,
                                                                             args.port))
                sleep(SLEEP_INTERVAL)

    def getCurrentSong(self):
        try:
            song = self.client.currentsong()
        except:
            self.start()

        try:
            artist = song["artist"]
        except KeyError:
            try:
                 song["artist"] = "{} (?)".format(split(song['file'])[0])
            except:
                song["artist"] = "Unknown Artist"

        try:
            album = song["album"]
        except KeyError:
            song["album"] = "Unknown Album"

        try:
            title = song["title"]
        except KeyError:
            try:
                song["title"] = "{} (?)".format(splitext(split(song['file'])[1])[0])
            except KeyError:
                song["title"] = "Unknown Title"

        try:
            song["duration"] = song["time"]
        except:
            song["duration"] = "not set"

        file_path = None
        try:
            song_path = join(MUSICPATH, split(song['file'])[0])
        except:
            song_path = False

        if song_path:
            for ext in ALBUM_COVER_FILE_EXTENSIONS:
                attempt_path = join(song_path, "cover" + ext)
                if exists(attempt_path):
                    file_path = attempt_path
                    break
        if song_path:
            song["file_path"] = file_path
        else:
            song["file_path"] = ""

        return song

    def getStatus(self):
        try:
            return self.client.status()["state"]
        except:
            self.start()

    def observe(self):

        status = ""
        song = ""

        while True:

            actualStatus = self.getStatus()
            try:
                actualSong = self.getCurrentSong()
            except KeyError:
                actualSong = False

            if status != actualStatus:
                status = self.getStatus()
                if args.debug:
                    print("** {0}: Status change: {1}".format(strftime("%a, %d %b %Y %H:%M:%S"), status))
                if actualStatus == "play":
                    pass
                    #song = mpd.getCurrentSong()
                    #self.nw.notify(song)
                else:
                    self.nw.notifyStatus(status)

            if (song != actualSong) and status != "stop" and actualSong != False:
                song = self.getCurrentSong()
                self.nw.notify(song)
                if args.debug:
                    print("** {0}: Song updated: {1}".format(strftime("%a, %d %b %Y %H:%M:%S"), song))

            sleep(POLLING_INTERVAL)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="MPD notification daemon")
    parser.add_argument("-d", "--debug", help="enable debugging",
                        action="store_true")
    parser.add_argument("-p", "--port", help="MPD port", default="6600",
                        type=int)
    parser.add_argument("-o", "--host", help="MPD host", default="127.0.0.1",
                        type=str)
    args = parser.parse_args()

    mpdotifier = Mpdotifier()
    mpdotifier.start()
